import ClassRead # Reads the input and the training sets
import NeuralNets # Implements a Neural Net
import NaiveBayes # Implements Naive Bayes Classification
import SVM # Implements SVM classification
import Kmeans
import MLP
import Bernoulli
import LogisticRegression
import KNeighbors
import MultinomialNB
import VotingEnsembles

##############################################################################################################################################################
##############################################################################################################################################################

                                                                    # Main

##############################################################################################################################################################
##############################################################################################################################################################


reading = ClassRead.Reader() # Import the ClassRead.py file, that reads the input and the training sets


##############################################################################################################################################################

# Read input and training file, check if the dataset is imbalanced

##############################################################################################################################################################


reading.readTrain()
#reading.checkImbalance()
#reading.readInput()


##############################################################################################################################################################

# Call a Neural Net to predict irony and evaluate the outcome

##############################################################################################################################################################


#NeuralNets.neural(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call Naive Bayes classification for Irony Detection

##############################################################################################################################################################


#NaiveBayes.Bayes(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call SVM classification for Irony Detection

##############################################################################################################################################################


#SVM.svm(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call K-means classification for Irony Detection

##############################################################################################################################################################


#Kmeans.kmeans(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call MLP Neural Net to predict irony and evaluate the outcome

##############################################################################################################################################################


#MLP.Mlp(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call Bernoulli to predict irony and evaluate the outcome

##############################################################################################################################################################


Bernoulli.BernoulliClass(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call Logistic Regression to predict irony and evaluate the outcome

##############################################################################################################################################################


#LogisticRegression.Logistic_Regression(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call K-Neighbors to predict irony and evaluate the outcome

##############################################################################################################################################################


#KNeighbors.K_Neighbors(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call Multinomial Naive Bayes to predict irony and evaluate the outcome

##############################################################################################################################################################


#MultinomialNB.Multinomial_NB(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

# Call Voting Ensembles, using various algorithms, to predict irony and evaluate the outcome

##############################################################################################################################################################


#VotingEnsembles.Voting_Ensembles(reading.train_A, reading.words_of_tweets)


##############################################################################################################################################################

#

##############################################################################################################################################################




